import OnCacheLineEvictedEventArgs from "../../Simulation/Events/OnCacheLineEvictedEventArgs";
import OnCacheLineLoadedEventArgs from "../../Simulation/Events/OnCacheLineLoadedEventArgs";
import OnMemoryAccessedEventArgs from "../../Simulation/Events/OnMemoryAccessedEventArgs";
import IEventBuffer from "./EventBuffer";

/// Event buffer implementation backed by an array.
export default class ArrayEventBuffer implements IEventBuffer
{
	/// Array of events that have been recorded.
	private readonly events: Array<
		OnCacheLineLoadedEventArgs |
		OnCacheLineEvictedEventArgs |
		OnMemoryAccessedEventArgs
	>;

	/// Number of events in the buffer.
	get length(): number
	{
		return this.events.length;
	}

	/// Initializes the buffer.
	constructor()
	{
		this.events = new Array<
			OnCacheLineLoadedEventArgs |
			OnCacheLineEvictedEventArgs |
			OnMemoryAccessedEventArgs
		>();
	}

	/// Gets the event at the given index.
	/// @param index Index of the event to retrieve.
	/// @throws RangeError Thrown if the given index is invalid.
	/// @returns The event at the given index.
	public getEvent(index: number):
		OnCacheLineLoadedEventArgs |
		OnCacheLineEvictedEventArgs |
		OnMemoryAccessedEventArgs
	{
		if (index < 0 || index >= this.events.length)
		{
			throw new RangeError("Index out of range.");
		}

		return this.events[index];
	}

	/// Invoked whenever a cache line is loaded into the cache.
	/// @param eventArgs Event arguments generated by the simulation.
	public onCacheLineLoaded(eventArgs: OnCacheLineLoadedEventArgs): void
	{
		this.events.push(eventArgs);
	}

	/// Invoked whenever a cache line is evicted from the cache.
	/// @param eventArgs Event arguments generated by the simulation.
	public onCacheLineEvicted(eventArgs: OnCacheLineEvictedEventArgs): void
	{
		this.events.push(eventArgs);
	}

	/// Invoked whenever a memory location is accessed.
	/// @param eventArgs Event arguments generated by the simulation.
	public onMemoryAccessed(eventArgs: OnMemoryAccessedEventArgs): void
	{
		this.events.push(eventArgs);
	}
}

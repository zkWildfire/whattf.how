import OnCacheLineEvictedEventArgs from "../../Simulation/Events/OnCacheLineEvictedEventArgs";
import OnCacheLineLoadedEventArgs from "../../Simulation/Events/OnCacheLineLoadedEventArgs";
import OnMemoryAccessedEventArgs from "../../Simulation/Events/OnMemoryAccessedEventArgs";
import ICacheRenderer from "./CacheRenderer";

/// Cache renderer that modifies the DOM to display the cache visualization.
export default class DomCacheRenderer implements ICacheRenderer
{
	/// Function that changes the color of a cache line in the DOM.
	private readonly _changeCacheLine: (cacheLine: number, css: string) => void;

	/// Number of cache lines in the cache.
	private readonly _cacheLineCount: number;

	/// CSS class to use for cache lines present in the cache.
	private readonly _loadedCss: string;

	/// CSS class to use for cache lines not present in the cache.
	private readonly _unloadedCss: string;

	/// Initializes the renderer.
	/// @param changeCacheLine Function that changes the color of a cache line
	///   in the DOM. This will be called with the index of the cache line whose
	///   color should be changed, and the CSS class(es) to change the cache
	///   line to.
	/// @param cacheLineCount Number of cache lines in the cache.
	/// @param loadedCss CSS class to use for cache lines present in the cache.
	/// @param unloadedCss CSS class to use for cache lines not present in the
	///   cache.
	constructor(
		changeCacheLine: (cacheLine: number, css: string) => void,
		cacheLineCount: number,
		loadedCss: string,
		unloadedCss: string)
	{
		this._changeCacheLine = changeCacheLine;
		this._cacheLineCount = cacheLineCount;
		this._loadedCss = loadedCss;
		this._unloadedCss = unloadedCss;
	}

	/// Invoked when the simulation visualization begins.
	public onSimulationStarted(): void
	{
		// Set all cache lines to unloaded
		for (let i = 0; i < this._cacheLineCount; i++)
		{
			this._changeCacheLine(i, this._unloadedCss);
		}
	}

	/// Invoked when the simulation visualization completes.
	public onSimulationFinished(): void
	{
		// Do nothing
	}

	/// Invoked whenever a cache line is loaded into the cache.
	/// @param eventArgs Event arguments generated by the simulation.
	public onCacheLineLoaded(eventArgs: OnCacheLineLoadedEventArgs): void
	{
		this._changeCacheLine(eventArgs.cacheIndex, this._loadedCss);
	}

	/// Invoked whenever a cache line is evicted from the cache.
	/// @param eventArgs Event arguments generated by the simulation.
	public onCacheLineEvicted(eventArgs: OnCacheLineEvictedEventArgs): void
	{
		this._changeCacheLine(eventArgs.cacheIndex, this._unloadedCss);
	}

	/// Invoked whenever a memory location is accessed.
	/// @param eventArgs Event arguments generated by the simulation.
	public onMemoryAccessed(eventArgs: OnMemoryAccessedEventArgs): void
	{
		// Do nothing
	}
}

import OnCacheLineEvictedEventArgs from "../../Simulation/Events/OnCacheLineEvictedEventArgs";
import OnCacheLineLoadedEventArgs from "../../Simulation/Events/OnCacheLineLoadedEventArgs";
import OnMemoryAccessedEventArgs from "../../Simulation/Events/OnMemoryAccessedEventArgs";
import IStatsRenderer from "./StatsRenderer";

/// Stats renderer that modifies the DOM to display the simulation stats.
export default class DomStatsRenderer implements IStatsRenderer
{
	/// Sets the number of memory accesses.
	private readonly _setMemoryAccessCount: (count: number) => void;

	/// Sets the number of cache hits.
	private readonly _setCacheHitCount: (count: number) => void;

	/// Sets the number of cache misses.
	private readonly _setCacheMissCount: (count: number) => void;

	/// Sets the cache hit rate.
	private readonly _setCacheHitRate: (count: number) => void;

	/// Sets the current cache usage.
	private readonly _setCurrentCacheUsage: (count: number) => void;

	/// Number of cache lines in the cache.
	private readonly _cacheLineCount: number;

	/// Number of memory accesses.
	private _memoryAccessCount: number = 0;

	/// Number of cache hits.
	private _cacheHitCount: number = 0;

	/// Number of cache misses.
	private _cacheMissCount: number = 0;

	/// Number of cache lines currently loaded.
	private _loadedCacheLineCount: number = 0;

	/// Initializes the renderer.
	/// @param setMemoryAccessCount Function that sets the number of memory
	///   accesses. This will be passed an integer to be displayed.
	/// @param setCacheHitCount Function that sets the number of cache hits.
	///   This will be passed an integer to be displayed.
	/// @param setCacheMissCount Function that sets the number of cache misses.
	///   This will be passed an integer to be displayed.
	/// @param setCacheHitRate Function that sets the cache hit rate. This will
	///   be passed a floating point value in the range [0, 1] to be displayed.
	/// @param setCurrentCacheUsage Function that sets the current cache usage.
	///   This will be passed a floating point value in the range [0, 1] to be
	///   displayed.
	/// @param cacheLineCount Number of cache lines in the cache.
	constructor(
		setMemoryAccessCount: (count: number) => void,
		setCacheHitCount: (count: number) => void,
		setCacheMissCount: (count: number) => void,
		setCacheHitRate: (count: number) => void,
		setCurrentCacheUsage: (count: number) => void,
		cacheLineCount: number)
	{
		this._setMemoryAccessCount = setMemoryAccessCount;
		this._setCacheHitCount = setCacheHitCount;
		this._setCacheMissCount = setCacheMissCount;
		this._setCacheHitRate = setCacheHitRate;
		this._setCurrentCacheUsage = setCurrentCacheUsage;
		this._cacheLineCount = cacheLineCount;
	}

	/// Invoked when the simulation visualization begins.
	public onSimulationStarted(): void
	{
		// Zero out all stats
		this._memoryAccessCount = 0;
		this._cacheHitCount = 0;
		this._cacheMissCount = 0;

		this.updateDom();
	}

	/// Invoked when the simulation visualization completes.
	public onSimulationFinished(): void
	{
		// Do nothing
	}

	/// Invoked whenever a cache line is loaded into the cache.
	/// @param eventArgs Event arguments generated by the simulation.
	public onCacheLineLoaded(eventArgs: OnCacheLineLoadedEventArgs): void
	{
		this._loadedCacheLineCount++;
		this.updateDom();
	}

	/// Invoked whenever a cache line is evicted from the cache.
	/// @param eventArgs Event arguments generated by the simulation.
	public onCacheLineEvicted(eventArgs: OnCacheLineEvictedEventArgs): void
	{
		this._loadedCacheLineCount--;
		this.updateDom();
	}

	/// Invoked whenever a memory location is accessed.
	/// @param eventArgs Event arguments generated by the simulation.
	public onMemoryAccessed(eventArgs: OnMemoryAccessedEventArgs): void
	{
		this._memoryAccessCount++;
		if (eventArgs.isHit)
		{
			this._cacheHitCount++;
		}
		else
		{
			this._cacheMissCount++;
		}

		this.updateDom();
	}

	/// Updates the stats displayed on the page.
	private updateDom(): void
	{
		this._setMemoryAccessCount(this._memoryAccessCount);
		this._setCacheHitCount(this._cacheHitCount);
		this._setCacheMissCount(this._cacheMissCount);
		this._setCurrentCacheUsage(
			this._loadedCacheLineCount / this._cacheLineCount
		);

		// This is the only statistic where the denominator could be 0
		if (this._memoryAccessCount === 0)
		{
			this._setCacheHitRate(0);
		}
		else
		{
			this._setCacheHitRate(this._cacheHitCount / this._memoryAccessCount);
		}
	}
}
